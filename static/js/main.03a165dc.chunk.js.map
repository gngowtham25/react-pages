{"version":3,"sources":["App.js","Child.js","reportWebVitals.js","index.js"],"names":["axios","Component","require","App","state","posts","get","then","res","setState","data","className","this","map","post","title","body","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAGMA,GCDyBC,YDCjBC,EAAQ,KA2CPC,E,kDAvCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,MAAO,IAHG,E,qDAOd,WAAoB,IAAD,OACjBL,EAAMM,IAAI,8CACTC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZJ,MAAMG,EAAIE,Y,oBAKhB,WAEE,OACE,qBAAKC,UAAU,MAAf,SAGIC,KAAKR,MAAMC,OAASO,KAAKR,MAAMC,MAAMQ,KAAI,SAACC,GAAD,OAAU,gCACjD,6BAAKA,EAAKC,QACV,4BAAID,EAAKE,OACT,mC,GA3BMC,IAAMhB,WEOTiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.03a165dc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport DisplayComponent from \"./Child\";\nconst axios = require('axios');\n\nclass App extends React.Component {\n\n  constructor() {\n    super()\n    this.state = {\n      posts: []\n    };\n  }\n\n  componentDidMount(){\n    axios.get(\"https://jsonplaceholder.typicode.com/posts\")\n    .then(res => {\n      this.setState({\n        posts:res.data\n      })\n    })\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n\n        {\n          this.state.posts && this.state.posts.map((post) => <div>\n            <h3>{post.title}</h3>\n            <p>{post.body}</p>\n            <hr></hr>\n          </div> \n          )\n        }\n\n        {/* <input value={this.state.value} onChange={ (evt) => this.setState({value: evt.target.value})} type=\"text\" />\n        <button onClick={() => { this.setState({ nextComponentValue: this.state.value }) }}>Submit</button>\n        <DisplayComponent value={this.state.nextComponentValue} /> */}\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component, PureComponent } from \"react\"\n\nclass DisplayComponent extends Component {\n\n    constructor() {\n        super()\n        this.lastUpdateDate = new Date();\n    }\n\n    shouldComponentUpdate() {   \n        const now = new Date();  \n        var seconds = (now.getTime() - this.lastUpdateDate.getTime()) / 1000;  \n        console.log(seconds) \n        return seconds == 0;   \n    }\n\n    componentDidUpdate() {     \n        this.lastUpdateDate = new Date();  \n    } \n\n    render() {\n        return (\n            <p>The value is {this.props.value}</p>\n        )\n    }\n\n}\n\nexport default DisplayComponent","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}